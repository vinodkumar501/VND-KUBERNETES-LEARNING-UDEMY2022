https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/

STATEFULSETS:

It is introduced to be able to run stateful applications:
• That need a stable pod hostname (instead of podname-randomstring)
• Your podname will have a sticky identity, using an index, e.g. podname-0 
podname-1 and podname-2 (and when a pod gets rescheduled, it’ll keep that 
identity)

Deleting and/or scaling a StatefulSet down will not delete the volumes 
associated with the StatefulSet (preserving data


StatefulSet is the workload API object used to manage stateful applications.( like db ) even if you delete pod it has state data after rescheduling.

Manages the deployment and scaling of a set of Pods, and provides guarantees about the ordering and uniqueness of these Pods.

Like a Deployment, a StatefulSet manages Pods that are based on an identical container spec. Unlike a Deployment, 
a StatefulSet maintains a sticky identity for each of their Pods. 
These pods are created from the same spec, but are not interchangeable: each has a persistent identifier that it maintains across any rescheduling.

stable is synonymous with persistence across Pod (re)scheduling. If an application doesn't require any stable identifiers or ordered deployment, deletion, or scaling, 
you should deploy your application using a workload object that provides a set of stateless replicas. Deployment or ReplicaSet may be better suited to your stateless needs.

https://www.bluematador.com/blog/an-introduction-to-kubernetes-statefulset

======================================== Statefulset ==========================================
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: web
spec:
  selector:
    matchLabels:
      app: nginx 
  serviceName: "nginx"
  replicas: 3 
  template:
    metadata:
      labels:
        app: nginx                                      # has to match .spec.selector.matchLabels
    spec:
      #terminationGracePeriodSeconds: 10
      containers:
      - name: nginx
        image: k8s.gcr.io/nginx-slim:0.8
        ports:
        - containerPort: 80
          name: web
        volumeMounts:
        - name: www
          mountPath: /usr/share/nginx/html
  volumeClaimTemplates:
  - metadata:
      name: www
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "standard"
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  ports:
  - port: 80
    name: web
  type: LoadBalancer
  selector:
    app: nginx
          
=============================================================================================================
->kubectl get po 

web-0                                     1/1     Running   0          9m50s
web-1                                     1/1     Running   0          10m
web-2                                     1/1     Running   0          10m

->kubectl get pvc

www-web-0                      Bound   pvc-46418931-1aea-484d-b4e3-a4cbee3777a2   1Gi        RWO            standard       19m
www-web-1                      Bound   pvc-18b33439-6d68-4f86-8418-0325f279b9d7   1Gi        RWO            standard       19m
www-web-2                      Bound   pvc-333a49a7-5184-4f78-ba7b-f89f425940af   1Gi        RWO            standard       19m

https://cloud.google.com/kubernetes-engine/docs/concepts/statefulset

It creates 3 pods using replicas 3 
Each and every replica will create a PVC 
and that pod will store the data inside of PVC 

Once you delete the pod it stores the data still and name as well same and it use same pvc as created as part of statefulsets even if you delete po , pvc still exists

=============================================================================================================
The volumeClaimTemplates
will provide stable storage using PersistentVolumes provisioned by a PersistentVolume Provisioner

Minimum ready seconds
FEATURE STATE: Kubernetes v1.23 [beta]

spec.minReadySeconds is an optional field that specifies the minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available. Please note that this feature is beta and enabled by default. Please opt out by unsetting the StatefulSetMinReadySeconds flag
, if you don't want this feature to be enabled. This field defaults to 0 (the Pod will be considered available as soon as it is ready).

Pod Identity
StatefulSet Pods have a unique identity that is comprised of an ordinal, a stable network identity,
and stable storage. The identity sticks to the Pod, regardless of which node it's (re)scheduled on


















